# Depend√™ncias
import streamlit as st
from xplendidLab import ABTesting
from xplendidFuncs import stream_words_sp, create_plot, \
print_summary_xp, stream_words_xp
import time
import joblib as jbl


# T√≠tulo, √≠cones e estiliza√ß√£o
pictograph = 'https://i.postimg.cc/y6DbW1FL/xplendid-pictograph.png'
st.set_page_config(
    page_title = 'xplendid', page_icon = pictograph, layout = 'centered',
    initial_sidebar_state = 'collapsed'
) 

# Cor de Fundo
st.markdown(
    '''
    <style>
        .stApp {
            background: #E1EBEE; /*Blue grey*/
        }
    </style>
''',
    unsafe_allow_html = True
)

# Link para mudan√ßa de p√°gina
_, _, lang_col = st.columns([4, 4, .8])
lang_col.page_link('xplendidAppEn.py', label = '', icon = 'üá¨üáß')
st.write('')

# Logo
st.image('https://i.postimg.cc/cCJg1kKz/xplendid-logo-body.png')

# Divisor antes do corpo
left_bar = 'https://i.postimg.cc/QMZnYCdf/left-bar-body.png'
st.image(left_bar)

# Boas vindas e vis√£o geral
st.markdown('''
        <div style='text-align: justify;'>
         Bem vindo ao <strong><em>xplendid</em></strong> ‚Äî a plataforma ideal para o design e an√°lise dos seus experimentos. Quer optimizar o seu website, refinar funcionalidades dos seus produtos ou  melhorar o desempenho das suas campanhas de marketing? O <strong><em>xplendid</em></strong> coloca √† sua disposi√ß√£o as ferramentas necess√°rias chegar a estes resultados.
         </div>
''', 
unsafe_allow_html = True
)

# Fonte em it√°lico e negrito
xplendid_bold_italic = "<span style = 'color: #ff66c4;'><strong><em>xplendid</strong></em></span>"

# Mais sobre xplendid
if st.button('üëÅ'):
    st.markdown(
        f'''
        <div style='text-align: justify;'>
        <strong>O que faz este servi√ßo excepcional?</strong>
        
        - <em><strong>Experimenta√ß√£o Simplificada: {xplendid_bold_italic}</strong> remove as complixidades do processo de an√°lise the experimentos com precis√£o, intui√ß√£o e rapidez. Calcule tamanho de amostras, compare resultados e desvende os insights ao detalhe.</em>
 
        - <em><strong>Relat√≥rios Informativos:</em></strong> aprofunde a an√°lise dos seus dados como nunca atrav√©s de visualiza√ßoes interativas. Desde gr√°ficos de erros, para efeitos de comparativos, o {xplendid_bold_italic} transforma simples n√∫meros em visuais sugestivos para tomada de decis√£o em ambientes din√¢micos.</em>
        
        - <em><strong>Recomenda√ß√µes Inteligentes:</strong> v√° al√©m dos n√∫meros ‚Äî receba orianta√ß√µes para compreender os "porqu√™s" e as pr√≥ximas etapas de implementa√ß√£o dos seus experimentos.</em>
        
        - <em><strong>√ìptima Experi√™ncia de Utilizador:</em></strong> com uma simples e pr√°tica, no {xplendid_bold_italic} tudo o que √© tudo o que √© necess√°rio para o seu experimento est√° a um click.</em>
        
        - <em><strong>Feita para Inovadores:</em></strong> ideal para profissionais de marketing, product managers, analistas e cientistas de dados, e demais interessados em tomar decis√µes com uma abordagem data-driven. Com {xplendid_bold_italic} seus dados se tornam superpoderes.</em>
        </div>
        ''',
        unsafe_allow_html = True
        )
    _, _, less = st.columns([3, 3, .3])
    if less.button('‚îÅ'):
        st.rerun()

# Call-to-action para come√ßar a explorar o xplendid
st.write(' ') 
st.write('Fa√ßa do **_xplendid_** a chave para o sucesso dos seus experimentos. Explore, analise e produza resultados hoje! üöÄ')

# Barra divisora antes do corpo da p√°gina
right_bar = 'https://i.postimg.cc/QdTyq1hB/right-bar-body.png'
st.image(right_bar)
for _ in range(3):
    st.write('')

# √çcone para design de experimentos
design_icon = 'https://i.postimg.cc/3JmKkyVB/design-icon.png'
st.image(design_icon)

# Divisor de outputs
xplendid_div_body = '''
<hr style = 'border: none; border-top: 1.5px dotted #ff66c4; height: 1px; width: 100%;'>
'''

# Divisor da sec√ß√£o de feedback
xplendid_div_fb = '''
<div style = 'width: 58%; height: 2px; background-color:  #ff66c4'></div>
'''
            
# Texto para objecto 'toast' em tratamento de excep√ß√£o
hint = '‚ùå Input(s) incorrecto(s)! Passe o mouse sobre o √≠cone ‚ùî para mais detalhes.'

# 'Toast' para valida√ß√£o de TCR e MDE na sec√ß√£o de design
inputs_sp = 'üö® Entrada(s) incorrecta(s)! Verifique os par√¢metros **TCR** ou **MDE**.'

# 'Toast' para notifica√ß√£o de '0' como entrada para propor√ß√£o de convers√µes
zero_conv_hint = 'üîî Inseriu **_:red[0]_** como entrada em **Convertidos**. _Sem problemas?_'

# 'Toast' para notifica√ß√£o sobre aus√™ncia de dados por apresentar
plot_error_hint = ':( N√£o √© poss√≠vel apresentar os resultados! Insira entradas v√°lidas para **:red[Tamanho da Amostra]** e **:red[Convertidos:red]**.'

# Expansor para calculador de amostras
with st.expander('Planeie o seu experimento ‚Ü¥'):
    for _ in range(5):
        st.write('\n')
    left_sp, _, right_sp = st.columns([1.5, .5, 1.5])
    with left_sp.container():
        bcr_sp = st.number_input('Taxa de Convers√£o de Refer√™ncia (%)', help = 'Varia de 0 a 100.')
        
        st.write('\n')
        mde_sp = st.number_input('M√≠nima Diferen√ßa Esperada (%)', help = 'Deve ser positiva.')
        st.write('\n')
        is_absolute_variation_sp = st.toggle('Varia√ß√£o Absoluta', True)
    
    with right_sp.container():
        alpha_sp = st.slider('N√≠vel de Signific√¢ncia (%)', 1, 10, 5)
        power_sp = st.slider('Poder Estat√≠stico (%)', 80, 99)
        is_two_tailed_sp = st.toggle('Teste Bicaudal', True)
        st.write('\n\n')
    _, sample_size, _ = st.columns(3)

    # A computar inputs para c√°lculo de tamanho de amostra ideal
    try:    
        if sample_size.button('Calcular Tamanho Amostral'):
            ab_exp_sp = ABTesting(bcr_sp, mde_sp, alpha = alpha_sp, 
                                            power = power_sp, is_absolute_variation = is_absolute_variation_sp,
                                           is_two_tailed = is_two_tailed_sp)
            min_sample_size = ab_exp_sp.evan_miller_sample_size()
            
            # A apresentar a informa√ß√£o relativa ao tamanho amostral
            if type(min_sample_size) is int: 
                message_sp_1 = 'Voc√™ deve conduzir o seu experimento com, no m√≠nimo,'
                message_sp_2 = f' **{min_sample_size}** '
                message_sp_3 = 'observa√ß√µes por variante.'
                message_sp = message_sp_1 + message_sp_2 + message_sp_3
                st.write('')
                st.write_stream(
                    stream_words_sp(xplendid_div_body, message_sp)
                    )
            else:
                st.toast(inputs_sp)                
    except:
        st.toast(hint)
  
    

# √çcone para resultados do experimento
for _ in range(2):
    st.write('')
analysis_icon = 'https://i.postimg.cc/7h1Wkytg/analysis-icon.png'
st.image(analysis_icon)


# Expansor para an√°lise de resultados do experimento
with st.expander('Analise os seus resultados ‚Ü¥'):
    for _ in range(4):
        st.write('\n')
        
    # Container de design do experimento     
    ## Lado esquerdo
    left_xp_sp, _, right_xp_sp = st.columns([1.5, .5, 1.5])
    with left_xp_sp.container():
        bcr_xp = st.number_input(
            'Taxa de Convers√£o de Refer√™ncia (%)', None, key = 'bcr_xp',
            help = 'Varia de 0 a 100.'
            )
        st.write('')
        mde_xp = st.number_input(
            'M√≠nima Diferen√ßa Esperada (%)', None, key = 'mde_xp',
            help = 'Deve ser positiva.'
            )
        st.write('\n')
        is_absolute_variation_xp = st.toggle(
            'Varia√ß√£o Absoluta', True, key = 'var_xp'
            )    
    
    ## Lado direito
    with right_xp_sp.container():
        alpha_xp = st.slider(
            'N√≠vel de Signific√¢ncia (%)', 1, 10, key = 'alpha_xp',
            )
        power_xp = st.slider(
            'Poder Estat√≠stico (%)', 80, 99, key = 'power_xp'
            )
        is_two_tailed_xp = st.toggle(
            'Teste Bicaudal', True, key = 'tail_xp')

    # Container do experimento       
    ## Lado esquerdo
    st.write('')
    left_xp, _, middle_xp, _, right_xp = st.columns([1.5, .5, 1.5, .5, 2])
    with left_xp.container():
        st.markdown(
            xplendid_bold_italic.replace('xplendid', 'Controlo'), 
            unsafe_allow_html = True)
        n_ctrl_xp = st.number_input(
            '_Tamanho da Amostra_', 0, key = 'nctrl', help = 'Deve ser um inteiro positivo.'
            )
        p_ctrl_xp = st.number_input(
            '_Convertidos_', key = 'pctrl', help = 'Varia de 0 a 1.'
            )
        
    ## Centro do container
    with middle_xp.container():
           st.markdown(
               xplendid_bold_italic.replace('xplendid', 'Efeito'), 
               unsafe_allow_html = True)
           n_trmt_xp = st.number_input(
               'Tamanho da Amastra', 0, key = 'ntrmt', label_visibility = 'hidden'
               )
           p_trmt_xp = st.number_input(
               'Convertidos', key = 'ptrmt', label_visibility = 'hidden'
               )
           
    ## Container direito
    with right_xp.container():
        for _ in range(2):
            st.write('')
        plot_xp = st.radio(
            'Gr√°fico', ['Curvas de Distribui√ß√£o', 'Intervalos de Confian√ßa']
            )  
     
    # Inicializa√ß√£o da sess√£o para visualiza√ß√£o de resultados
    if 'exp_results_button' not in st.session_state:
        st.session_state.exp_results_button = False
        
    ## Bot√£o para visualiza√ß√£o de resultados
    exp_results, _, _ = st.columns([.3, 1.5, 1.5])    
    
    ## Etapas a executar caso o bot√£o seje premido
    if exp_results.button('‚ñ∑', help = 'Ver resultados!'):  
        st.session_state.exp_results_button = True
        
    ## A manter a sess√£o aberta
    if st.session_state.exp_results_button:  
        success = True
        try:
            ## A computar resultados
            ab_experiment_xp = ABTesting(bcr_xp, mde_xp, alpha = alpha_xp, 
                                            power = power_xp, is_absolute_variation = is_absolute_variation_xp,
                                           is_two_tailed = is_two_tailed_xp
                                           )                 
        except:
            st.toast(inputs_sp)
            success = False
        
        ## Spinner para processar a apresenta√ß√£o de resultados       
        with st.spinner('A processar...'):
            time.sleep(1)
        
        # A tentar mostrar resultados ap√≥s inser√ß√£o de par√¢metros de design
        if success:            
            try:
                ## A criar gr√°fico com o t√≠tulo em portugu√™s
                fig = ab_experiment_xp.get_experiment_results(
                    n_ctrl_xp, p_ctrl_xp, n_trmt_xp, p_trmt_xp, plot_ = plot_xp, lang = 'pt'
                    )
                fig.update_layout(title = dict(text = 'Resultados do Experimento'))
                
                ## A gerar recomenda√ß√£o
                results_summary = ab_experiment_xp.get_experiment_results(
                                n_ctrl_xp, p_ctrl_xp, n_trmt_xp, p_trmt_xp, plot_ = None, lang = 'pt'
                                )
                
                # Notifica√ß√£o para o caso de se ter 0 convertidos
                if 0 in [p_ctrl_xp, p_trmt_xp]:
                    st.toast(zero_conv_hint)
                    
                ## Divisor e spinner para apresentar resultados 
                st.write('')
                st.markdown(xplendid_div_body, unsafe_allow_html = True)
                
                ## A apresentar o gr√°fico
                st.plotly_chart(fig, config = {'displayModeBar': False})
                
                ## Sec√ß√£o de download e visualiza√ß√£o de recomenda√ß√µes
                _, download_col, sum_col, _ = st.columns([4, 1.5, 1.5, 4])
                
                # Tornando o gr√°fico descarreg√°vel
                img_buf = create_plot(fig)        
                filename = f"resultados_experimento_{plot_xp.lower().replace(' ', '')}.png"
                
                ## Injec√ß√£o do bot√£o de download
                download_col.download_button('üì•', data = img_buf, file_name = filename)
                
                ## Injecting view recommendation button
                if sum_col.button('üí¨', help = 'Ver resltados e recomenda√ß√£o'):
                    
                    ## Divisor para apresenta√ß√£o de recomenda√ß√µes
                    st.markdown(xplendid_div_body, unsafe_allow_html = True)
                    
                    ## A apresentar resultados e recomenda√ß√µes
                    print_summary_xp(
                        results_summary[0], 
                        stream_words_xp(results_summary[1], results_summary[2])
                        )
                
                    ## A fechar a sec√ß√£o de resultados
                    _, _, close_col, _ = st.columns([4, 4, .3, .2])
                    if close_col.button('‚Üñ'):
                                 st.rerun()
            except:
                st.write(plot_error_hint)
        else:
            pass
    

    
# Sec√ß√£o de feedback
_, _, fb_col = st.columns([1.5, 1.5, 1.5])
with fb_col.container():
    for _ in range(4):
        st.write('')
    st.markdown(f'Avalie o **{xplendid_bold_italic}** agora!', unsafe_allow_html = True) 
    feedback_series = jbl.load('xplendidFeedbackSeries.joblib')
    sentiment_mapping = ['uma', 'duas', 'tr√™s', 'quatro', 'cinco']
    selected = st.feedback('stars')
    st.markdown(xplendid_div_fb, unsafe_allow_html = True)
    if selected is not None:
        if sentiment_mapping[selected] == 'uma':
            st.markdown(f'Voc√™ deu **{sentiment_mapping[selected]}** estrela ao **xplendid**! Obrigado pelo seu feedback. üòâ')
        else:
            st.markdown(f'Voc√™ deu **{sentiment_mapping[selected]}** estrelas ao **xplendid**! Obrigado pelo seu feedback. üòâ')
        feedback_series[len(feedback_series)] = sentiment_mapping[selected]
        jbl.dump(feedback_series, 'xplendidFeedbackSeries.joblib')
    else:
        pass



# Sec√ß√£o de links    
for i in range(8):
    st.write('')

# Convite de conex√£o customizado
container_title = '''<div style = 'text-align: center; color: #040404'><b>Conecta-te comigo! üó™</b></div>'''
st.markdown(container_title, unsafe_allow_html=True)

# √çcones da sec√ß√£o de links
kofi_icon_url = 'https://i.postimg.cc/wj3w1mjG/kofi-icon.png'
linktree_icon_url = 'https://i.postimg.cc/t4vNmLB0/linktree-icon.png'
github_icon_url = 'https://i.postimg.cc/9FVb4PDk/github-icon.png'
linkedin_icon_url = 'https://i.postimg.cc/W1178266/linkedin-icon.png'
height_ = 35

container_style = '''
background-color: #E1EBEE;
border-radius: 14px;
padding: 10px;
margin: 10px;
height: 60px;
display: flex;
justify-content: center;
align-items: center;
gap: 15px;
'''

icons_markdown = f'''
<div style = '{container_style}'>
        </a>
        <a href = 'https://ko-fi.com/domingosdeeulariadumba' target = '_blank' style = 'text-decoration: none;'>
            <img src = '{kofi_icon_url}' 
                 alt = 'Domingos' ko-fi' 
                 height = '{height_}' width = '{height_}'/>
        </a>
        </a>
        <a href = 'https://linktr.ee/domingosdeeulariadumba' target = '_blank' style = 'text-decoration: none;'>
            <img src = '{linktree_icon_url}' 
                 alt = 'Domingos' Linktree' 
                 height = '{height_}' width = '{height_}'/>
        </a>
        <a href = 'https://github.com/domingosdeeulariadumba' target = '_blank' style = 'text-decoration: none margin:;'>
            <img src = '{github_icon_url}' 
                 alt = "Domingos' GitHub" 
                 height = '{height_}' width = '{height_}' />
        </a>
        <a href = 'https://linkedin.com/in/domingosdeeulariadumba/' target = '_blank' style = 'text-decoration: none;'>
            <img src = '{linkedin_icon_url}' 
                 alt = "Domingos' LinkedIn" 
                 height = '{height_}' width = '{height_}' />
        </a>
</div>
'''

# Centraliza√ß√£o dos √≠cones
_, middle, _ = st.columns([0.5, .5, 0.5])
with middle.container(border = False):
    st.markdown(icons_markdown,
                unsafe_allow_html = True)
    
# Rodap√©
footer_markdown = '''<div style = 'text-align: center; color: #040404'>
Desenvolvido por <b>Domingos de Eul√°ria Dumba</b>
 ¬© 2025.
</div>'''
st.markdown(footer_markdown, unsafe_allow_html = True)